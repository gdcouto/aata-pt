<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->

<section xml:id="poly-sage">
	<title>Sage</title>

	<introduction>

		<p>Sage é particularmente boa pra construir, analisar e manipular anéis de polinômios. Vimos algo relacionado a isso no capítulo anterior.  Comecemos criando três anéis de polinômios e comprovemos algumas de suas propriedades básicas. Existem diferentes formas de construir anéis de polinômios, mas a sintaxe usada aqui é mais direta.</p>

	</introduction>


	<subsection>
		<title>Anéis de Polinômios e seus Elementos</title>

		<sage>
		<input>
		R.&lt;x&gt; = Integers(8)[]; R
		</input>
		<output>
		Univariate Polynomial Ring in x over Ring of integers modulo 8
		</output>
		</sage>

		<sage>
		<input>
		S.&lt;y&gt; = ZZ[]; S
		</input>
		<output>
		Univariate Polynomial Ring in y over Integer Ring
		</output>
		</sage>

		<sage>
		<input>
		T.&lt;z&gt; = QQ[]; T
		</input>
		<output>
		Univariate Polynomial Ring in z over Rational Field
		</output>
		</sage>

		<p>As propriedades básicas dos anéis podem ser usadas nesses exemplos.</p>

		<sage>
		<input>
		R.is_finite()
		</input>
		<output>
		False
		</output>
		</sage>

		<sage>
		<input>
		R.is_integral_domain()
		</input>
		<output>
		False
		</output>
		</sage>

		<sage>
		<input>
		S.is_integral_domain()
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		T.is_field()
		</input>
		<output>
		False
		</output>
		</sage>

		<sage>
		<input>
		R.characteristic()
		</input>
		<output>
		8
		</output>
		</sage>

		<sage>
		<input>
		T.characteristic()
		</input>
		<output>
		0
		</output>
		</sage>

		<p>Com a construção e a sintaxe acima, as variáveis podem ser usadas para criar elementos do anel de polinômios sem coerção explicitamente (ainda temos que ter cuidado com os polinômios constantes).</p>

		<sage>
		<input>
		y in S
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		x in S
		</input>
		<output>
		False
		</output>
		</sage>

		<sage>
		<input>
		q = (3/2) + (5/4)*z^2
		q in T
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		3 in S
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		r = 3
		r.parent()
		</input>
		<output>
		Integer Ring
		</output>
		</sage>

		<sage>
		<input>
		s = 3*y^0
		s.parent()
		</input>
		<output>
		Univariate Polynomial Ring in y over Integer Ring
		</output>
		</sage>

		<p>Os polinômios podem ser avaliados como se fossem funções, de maneira que podemos imitar o homomorfismo de avaliação.</p>

		<sage>
		<input>
		p = 3 + 5*x + 2*x^2
		p.parent()
		</input>
		<output>
		Univariate Polynomial Ring in x over Ring of integers modulo 8
		</output>
		</sage>

		<sage>
		<input>
		p(1)
		</input>
		<output>
		2
		</output>
		</sage>

		<sage>
		<input>
		[p(t) for t in Integers(8)]
		</input>
		<output>
		[3, 2, 5, 4, 7, 6, 1, 0]
		</output>
		</sage>

		<p>Notemos que <c>p</c> é um polinômio de grau dois, no entanto podemos verificar a força bruta que só tem uma raiz, indo de forma contrária a nossa expectativa usual. Pode ser ainda mais não usual.</p>

		<sage>
		<input>
		q = 4*x^2+4*x
		[q(t) for t in Integers(8)]
		</input>
		<output>
		[0, 0, 0, 0, 0, 0, 0, 0]
		</output>
		</sage>

		<p>Sage puede criar e manipular anéis de polinômios de uma variável, mas não teremos maiores oportunidades de analisar essa funcionalidade neste curso.</p>

		<sage>
		<input>
		M.&lt;s, t&gt; = QQ[]; M
		</input>
		<output>
		Multivariate Polynomial Ring in s, t over Rational Field
		</output>
		</sage>

	</subsection>

	<subsection>
		<title>Polinômios Irredutíveis</title>

		<p>Se um polinômio se fatora ou não, tomando em consideração o anel usado para seus coeficientes, é uma pergunta importante neste capítulo e em muitos dos que se seguem. Sage é capaz de fatorar, e de determinar irredutibilidade, sobre os inteiros, os racionais, e os corpos finitos.</p>

		<p>Primero, sobre os racionais.</p>

		<sage>
		<input>
		R.&lt;x&gt; = QQ[]
		p = 1/4*x^4 - x^3 + x^2 - x - 1/2
		p.is_irreducible()
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		p.factor()
		</input>
		<output>
		(1/4) * (x^4 - 4*x^3 + 4*x^2 - 4*x - 2)
		</output>
		</sage>

		<sage>
		<input>
		q = 2*x^5 + 5/2*x^4 + 3/4*x^3 - 25/24*x^2 - x - 1/2
		q.is_irreducible()
		</input>
		<output>
		False
		</output>
		</sage>

		<sage>
		<input>
		q.factor()
		</input>
		<output>
		(2) * (x^2 + 3/2*x + 3/4) * (x^3 - 1/4*x^2 - 1/3)
		</output>
		</sage>

		<p>Fatorar sobre os inteiros não é realmente diferente que fazer sobre os racionais.  Isto é o que o Teorema<nbsp /><xref ref="theorem-gauss-lemma" /> <mdash /> nos diz, encontrar uma fatoração sobre os inteiros pode ser convertido em encontrar uma fatoração sobre os racionais.  Assim que funciona em Sage, tem pouca diferença entre trabalhar sobre os racionais e sobre os inteiros. É um pouco diferente quando trabalhamos sobre um corpo finito. Um comentário virá mais a frente.</p>

		<sage>
		<input>
		F.&lt;a&gt; = FiniteField(5^2)
		S.&lt;y&gt; = F[]
		p = 2*y^5 + 2*y^4 + 4*y^3 + 2*y^2 + 3*y + 1
		p.is_irreducible()
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		p.factor()
		</input>
		<output>
		(2) * (y^5 + y^4 + 2*y^3 + y^2 + 4*y + 3)
		</output>
		</sage>

		<sage>
		<input>
		q = 3*y^4+2*y^3-y+4; q.factor()
		</input>
		<output>
		(3) * (y^2 + (a + 4)*y + 2*a + 3) * (y^2 + 4*a*y + 3*a)
		</output>
		</sage>

		<sage>
		<input>
		r = y^4+2*y^3+3*y^2+4; r.factor()
		</input>
		<output>
		(y + 4) * (y^3 + 3*y^2 + y + 1)
		</output>
		</sage>

		<sage>
		<input>
		s = 3*y^4+2*y^3-y+3; s.factor()
		</input>
		<output>
		(3) * (y + 1) * (y + 3) * (y + 2*a + 4) * (y + 3*a + 1)
		</output>
		</sage>

		<p>Para verificar essas fatorações, devemos calcular no corpo finito, <c>F</c>, por que precisamos saber como se comporta o símbolo <c>a</c>.  Este símbolo corresponde a uma raiz de um polinômio de grau 2 sobre os inteiros mod 5, que podemos obter com o método <c>.modulus()</c>.</p>

		<sage>
		<input>
		F.modulus()
		</input>
		<output>
		x^2 + 4*x + 2
		</output>
		</sage>

		<p>Assim <m>a^2+4a+2=0</m>, ou <m>a^2=-4a-3=a+2</m>.  Assim, ao verificar as fatorações, cada vez que apareça <m>a^2</m> podemos substituir por <m>a+2</m>.  Notemos que pelo Corolário<nbsp /><xref ref="corollary-poly-factor" /> poderíamos encontrar o fator linear de <c>r</c>, e os quatro fatores lineares de <c>s</c>, mediante uma quantidade bruta de suas raízes.  Isso é realizável dado que o corpo é finito.</p>

		<sage>
		<input>
		[t for t in F if r(t)==0]
		</input>
		<output>
		[1]
		</output>
		</sage>

		<sage>
		<input>
		[t for t in F if s(t)==0]
		</input>
		<output>
		[2, 3*a + 1, 4, 2*a + 4]
		</output>
		</sage>

		<p>Mas, <c>q</c> se fatora em dois polinômios de grau 2, de maneira que nenhuma quantidade de raízes nos permitirá descobrir estes fatores.</p>

		<p>Pelo critério de Eisenstein, podemos criar polinômios irredutíveis, como no Exemplo<nbsp /><xref ref="example-poly-eisenstein" />.</p>

		<sage>
		<input>
		W.&lt;w&gt; = QQ[]
		p = 16*w^5 - 9*w^4 +3*w^2 + 6*w -21
		p.is_irreducible()
		</input>
		<output>
		True
		</output>
		</sage>

		<p>Sobre o corpo <m>{\mathbb Z}_p</m>, os polinômios de Conway são escolhas canônicas para um polinômio de grau <m>n</m> irredutível sobre <m>{\mathbb Z}_p</m>.  Veja os exercícios para aprender mais sobre esses polinômios.</p>

	</subsection>

	<subsection>
		<title>Polinômios sobre Corpos</title>

		<p>Se <m>F</m> é um corpo, então todo ideal de <m>F[x]</m> é principal (Teorema<nbsp /><xref ref="theorem-poly-principal-ideal" />).  Nada nos impede de dar a Sage dois (ou mais) geradores para construir um ideal, mas Sage determinará um elemento para usá-lo na descrição do ideal como ideal principal.</p>

		<sage>
		<input>
		W.&lt;w&gt; = QQ[]
		r = -w^5 + 5*w^4 - 4*w^3 + 14*w^2 - 67*w + 17
		s = 3*w^5 - 14*w^4 + 12*w^3 - 6*w^2 + w
		S = W.ideal(r, s)
		S
		</input>
		<output>
		Principal ideal (w^2 - 4*w + 1) of
		Univariate Polynomial Ring in w over Rational Field
		</output>
		</sage>

		<sage>
		<input>
		(w^2)*r + (3*w-6)*s in S
		</input>
		<output>
		True
		</output>
		</sage>

		<p>O Teorema<nbsp /><xref ref="theorem-max-ideal-poly" /> é um ponto chave que nos permite construir corpos finitos facilmente. Aqui temos uma construção de um corpo finito de ordem <m>7^5=16\,807</m>.  Tudo que precisamos é um polinômio de grau <m>5</m> que seja irredutível sobre <m>{\mathbb Z}_7</m>.</p>

		<sage>
		<input>
		F = Integers(7)
		R.&lt;x&gt; = F[]
		p = x^5+ x + 4
		p.is_irreducible()
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		id = R.ideal(p)
		Q = R.quotient(id); Q
		</input>
		<output>
		Univariate Quotient Polynomial Ring in xbar over
		Ring of integers modulo 7 with modulus x^5 + x + 4
		</output>
		</sage>

		<sage>
		<input>
		Q.is_field()
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		Q.order() == 7^5
		</input>
		<output>
		True
		</output>
		</sage>

		<p>O símbolo <c>xbar</c> é um gerador do corpo, mas neste momento não é acessível.  <c>xbar</c> es la clase <m>x + \langle x^5+ x + 4\rangle</m>.  Uma melhor construção incluiria a especificação deste gerador.</p>

		<sage>
		<input>
		Q.gen(0)
		</input>
		<output>
		xbar
		</output>
		</sage>

		<sage>
		<input>
		Q.&lt;t&gt; = R.quotient(id); Q
		</input>
		<output>
		Univariate Quotient Polynomial Ring in t over
		Ring of integers modulo 7 with modulus x^5 + x + 4
		</output>
		</sage>

		<sage>
		<input>
		t^5 + t + 4
		</input>
		<output>
		0
		</output>
		</sage>

		<sage>
		<input>
		t^5 == -(t+4)
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		t^5
		</input>
		<output>
		6*t + 3
		</output>
		</sage>

		<sage>
		<input>
		(3*t^3 + t + 5)*(t^2 + 4*t + 2)
		</input>
		<output>
		5*t^4 + 2*t^2 + 5*t + 5
		</output>
		</sage>

		<sage>
		<input>
		a = 3*t^4 - 6*t^3 + 3*t^2 + 5*t + 2
		ainv = a^-1; ainv
		</input>
		<output>
		6*t^4 + 5*t^2 + 4
		</output>
		</sage>

		<sage>
		<input>
		a*ainv
		</input>
		<output>
		1
		</output>
		</sage>

	</subsection>

</section>
