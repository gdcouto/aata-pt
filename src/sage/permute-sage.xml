<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->

<section xml:id="permute-sage">
	<title>Sage</title>

	<introduction>
		<p>Uma boa parte da implementação de teoria de grupos em Sage está baseada em rotinas de <acro>GAP</acro> (Groups, Algorithms, and Programming) em <url href="http://www.gap-system.org/">www.gap-system.org</url>, que está incluído em cada cópia de Sage.  Este é um pacote de código aberto maduro, que existe desde 1986.</p>

		<p>Como vimos, os grupos podem ser descritos de muitas maneiras diferentes, tais como conjuntos de matrizes, conjuntos de números complexos, ou conjuntos de símbolos sujeitos a certas relações. Uma maneira muito concreta de representar grupos é via permutações (funções bijetivas dos inteiros de <m>1</m> a <m>n</m>), usando a composição de funções como a operação no grupo. Sage tem muitas rotinas desenhadas para trabalhar com grupos deste tipo e são também uma boa forma para que as pessoas que queiram aprender teoria de grupos ganhem experiência com as ideias básicas da teoria de grupos. Por estas duas razões, nos concentraremos neste tipo de grupos.</p>
	</introduction>

	<subsection>
		<title>Grupos de permutações e seus elementos</title>

		<p>A forma mais fácil de trabalhar com elementos de grupos de permutação em Sage é escrevê-los com notação cíclica. Como estes são produtos de ciclos disjuntos (que comutam), não necessitamos preocupar-nos pela ordem em que aparecem os ciclos. Se escrevemos <c>(1,3)(2,4)</c> provavelmente entenderemos que se trata de uma permutação (o conteúdo deste capítulo!) e sabemos que poderia ser um elemento de <m>S_4</m>, o até de um grupo simétrico em mais de 4 símbolos. Sage não pode começar tão facilmente e necessita um pouco de contexto, para que possamos coagir uma cadeia de caracteres escritos com notação de ciclos a pertencer a um grupo simétrico para produzir elementos do grupo.  Aqui estão alguns exemplos e cálculos. Recorde que Sage e o texto diferem na ordem usada para compor duas permutações em um produto.</p>

		<sage>
			<input>
			G = SymmetricGroup(5)
			sigma = G("(1,3)(2,5,4)")
			sigma*sigma
			</input>
			<output>(2,4,5)</output>
		</sage>

		<sage>
			<input>
			rho = G("(2,4)(1,5)")
			rho^3
			</input>
			<output>(1,5)(2,4)</output>
		</sage>

		<p>Se os próximos três exemplos parecem confusos, ou <q>ao contrário</q>, então seria um bom momento para revisar a discussão a respeito da ordem da composição de permutações em Sage feita na subseção<nbsp /><xref ref="subsection-groups-of-symmetries" text="title" />.</p>

		<sage>
			<input>sigma*rho</input>
			<output>(1,3,5,2)</output>
		</sage>

		<sage>
			<input>rho*sigma</input>
			<output>(1,4,5,3)</output>
		</sage>

		<sage>
			<input>rho^-1*sigma*rho</input>
			<output>(1,2,4)(3,5)</output>
		</sage>

		<p>Há formas alternativas de criar elementos de um grupo de permutações, que podem ser úteis em alguma situação particular, mas que não são de uso muito frequente.</p>

		<sage>
			<input>
			sigma1 = G("(1,3)(2,5,4)")
			sigma1
			</input>
			<output>(1,3)(2,5,4)</output>
		</sage>

		<sage>
			<input>
			sigma2 = G([(1,3),(2,5,4)])
			sigma2
			</input>
			<output>(1,3)(2,5,4)</output>
		</sage>

		<sage>
			<input>
			sigma3 = G([3,5,1,2,4])
			sigma3
			</input>
			<output>(1,3)(2,5,4)</output>
		</sage>

		<sage>
			<input>sigma1 == sigma2</input>
			<output>True</output>
		</sage>

		<sage>
			<input>sigma2 == sigma3</input>
			<output>True</output>
		</sage>

		<sage>
			<input>sigma2.cycle_tuples()</input>
			<output>[(1, 3), (2, 5, 4)]</output>
		</sage>

		<sage>
			<input>[sigma3(x) for x in G.domain()]</input>
			<output>[3, 5, 1, 2, 4]</output>
		</sage>

		<p>A segunda versão de <m>\sigma</m> é uma lista de <q>tuplas</q>, que requer muitas vírgulas e devem ser incluídas em uma lista. (Uma tupla de tamanho um deve ser escrita como <c>(4,)</c> para distinguir-la do uso de parênteses para agrupar, como em <c>5*(4)</c>.)  A terceira versão usa a <q>fila inferior</q> da notação mais incômoda de duas filas introduzida no começo do capítulo <mdash /> é uma lista ordenada das <em>imagens</em> da permutação quando é considerada como uma função.</p>

		<p>Vemos que sem importar as três formas diferentes de início, todas as versões de <m>\sigma</m> se mostram da mesma maneira, e, mais ainda, são iguais entre si. (Esta é uma sutil diferença entre <mdash /> o que um objeto <em>é</em> em Sage versus como um objeto se <em>mostra</em>.)</p>

		<p>Podemos ser ainda mais cuidadosos sobre a natureza de nossos elementos. Note que uma vez que Sage começa, pode promover o produto <m>\tau\sigma</m> ao grupo maior de permutações.  Podemos <q>promover</q> elementos a grupos maiores de permutações, mas seria um erro tentar forçar um elemento em um grupo simétrico demasiado pequeno.</p>

		<sage>
			<input>
			H = SymmetricGroup(4)
			sigma = H("(1,2,3,4)")
			G = SymmetricGroup(6)
			tau = G("(1,2,3,4,5,6)")
			rho = tau * sigma
			rho
			</input>
			<output>(1,3)(2,4,5,6)</output>
		</sage>

		<sage>
			<input>sigma.parent()</input>
			<output>Symmetric group of order 4! as a permutation group</output>
		</sage>

		<sage>
			<input>tau.parent()</input>
			<output>Symmetric group of order 6! as a permutation group</output>
		</sage>

		<sage>
			<input>rho.parent()</input>
			<output>Symmetric group of order 6! as a permutation group</output>
		</sage>

		<sage>
			<input>tau.parent() == rho.parent()</input>
			<output>True</output>
		</sage>

		<sage>
			<input>
			sigmaG = G(sigma)
			sigmaG.parent()
			</input>
			<output>Symmetric group of order 6! as a permutation group</output>
		</sage>

		<p>É um erro tentar coagir uma permutação com demasiados símbolos a um grupo de permutações que use menos símbolos.</p>

		<sage>
			<input>tauH = H(tau)</input>
			<output>
			Traceback (most recent call last):
			...
			ValueError: Invalid permutation vector: (1,2,3,4,5,6)
			</output>
		</sage>

		<p>Melhor que trabalhar simplesmente com elementos do grupo simétrico, podemos criar diversos grupos de permutações em Sage. A seguir temos uma mostra para começar:</p>

		<table xml:id="table-sage-permutation-groups">
			<caption>Alguns grupos de permutações em Sage</caption>
		    <tabular halign="left" top="medium">
	    		<row bottom="medium">
	    			<cell>Comando Sage</cell>
	    			<cell>Descrição</cell>
	    		</row>
				<row>
					<cell><c>SymmetricGroup(n)</c> </cell>
					<cell>Grupo simétrico em <m>n</m> símbolos, <m>n!</m> elementos</cell>
				</row>
				<row>
					<cell><c>DihedralGroup(n)</c></cell>
					<cell>Simetrias de um <m>n</m>-ágono, <m>2n</m> elementos.</cell>
				</row>
				<row>
					<cell><c>CyclicPermutationGroup(n)</c></cell>
					<cell>Rotações de um <m>n</m>-ágono, <m>n</m> elementos</cell>
				</row>
				<row>
					<cell><c>AlternatingGroup(n)</c></cell>
					<cell>Grupo alternante em <m>n</m> símbolos, <m>n!/2</m> elementos</cell>
				</row>
				<row bottom="medium">
					<cell><c>KleinFourGroup()</c></cell>
					<cell>Um grupo no cíclico de ordem 4</cell>
				</row> 
		    </tabular>
		</table>

		<sage type="practice" />

		<p>Você também pode localizar grupos de permutações em Sage usando o catálogo de <c>grupos</c>. Na próxima célula ponha o cursor depois do ponto final e pressione a tecla de tabular (TAB). Você obterá uma lista de métodos que pode usar para criar grupos de permutações. Como sempre, ponha um ponto de interrogação depois de um método e pressione a tecla de tabular para obter documentação na linha do método. (isto funciona em uma célula de Sage normal mas não parece funcionar no  "libro")</p>

		<sage doctest="not tested">
			<input>groups.permutation.</input>
		</sage>

	</subsection>

	<subsection>
		<title>Propriedades de permutações (Elementos)</title>

		<p>Às vezes é mais fácil tomar um elemento de uma lista de elementos em um grupo de permutações, assim já está associado a um "parent" e não há necessidade de fazer nenhuma coerção. A seguir, <c>rotate</c> e <c>flip</c> são automaticamente elementos de <c>G</c> pela forma com que foram obtidos.</p>

		<sage>
			<input>
			D = DihedralGroup(5)
			elements = D.list(); elements
			</input>
			<output>
			[(), (1,5)(2,4), (1,2,3,4,5), (1,4)(2,3), (1,3,5,2,4), (2,5)(3,4),
			 (1,3)(4,5), (1,5,4,3,2), (1,4,2,5,3), (1,2)(3,5)]
			</output>
		</sage>

		<sage>
			<input>
			rotate = elements[2]
			flip = elements[3]
			flip*rotate == rotate* flip
			</input>
			<output>False</output>
		</sage>

		<p>Vemos com esta última prova que o grupo de simetrias de um pentágono é não abeliano. Mas há uma maneira mais fácil.</p>

		<sage>
			<input>
			D = DihedralGroup(5)
			D.is_abelian()
			</input>
			<output>False</output>
		</sage>

		<p>Existem muitos métodos, tanto para os grupos de permutações como para seus elementos. Use a célula vazia abaixo para criar um grupo de permutações (o que quiser) e um elemento de um grupo de permutações (qualquer).  A continuação usa a tab-completion para ver todos os métodos disponíveis para um elemento, ou para um grupo (nome, punto, tecla-tab). Você pode reconhecer alguns nomes, outros aprenderemos nos capítulos seguintes, alguns são ferramentas muito especializadas de investigação que poderiam ser usadas para desenvolver uma tese de doutorado em teoria de grupos.  Para qualquer destes métodos, recorde que pode escrever o nome, seguido de um ponto de interrogação, para ver a documentação y exemplos.  <em>Experimente e explore</em> <mdash /> é realmente difícil perder algo. </p>

		<sage type="practice" />

		<p>Aqui há alguns exemplos de vários métodos disponíveis.</p>

		<sage>
			<input>
			A4 = AlternatingGroup(4)
			A4.order()
			</input>
			<output>12</output>
		</sage>

		<sage>
			<input>A4.is_finite()</input>
			<output>True</output>
		</sage>

		<sage>
			<input>A4.is_abelian()</input>
			<output>False</output>
		</sage>

		<sage>
			<input>A4.is_cyclic()</input>
			<output>False</output>
		</sage>

		<sage>
			<input>
			sigma = A4("(1,2,4)")
			sigma^-1
			</input>
			<output>(1,4,2)</output>
		</sage>

		<sage>
			<input>sigma.order()</input>
			<output>3</output>
		</sage>

		<p>Um método útil para estudar o grupo alternante é o <c>.sign()</c> implementado para elementos de um grupo de permutações. Retorna <c>1</c> se a permutação é par e <c>-1</c> se é ímpar.</p>

		<sage>
			<input>
			G = SymmetricGroup(3)
			sigma = G("(1,2)")
			tau = G("(1,3)")
			rho = sigma*tau
			sigma.sign()
			</input>
			<output>-1</output>
		</sage>

		<sage>
			<input>rho.sign()</input>
			<output>1</output>
		</sage>

		<p>Podemos criar subgrupos dando ao grupo uma lista de <q>geradores.</q>  Estes elementos são usados para <q>gerar</q> um subgrupo <mdash /> imagine multiplicar estes elementos (e seus inversos) uma e outra vez, criando novos elementos que também devem estar no subgrupo e que também participam de novos produtos, até que não apareçam novos elementos. Esta definição termina com um enunciado terrivelmente impreciso, mas deveria ser suficiente por enquanto. Uma melhor definição é que o subgrupo gerado pelos elementos é o menor subgrupo que contém todos os geradores <mdash /> o que está certo se conhecemos todos os subgrupos de antemão.</p>

		<p>Com um único gerador, os produtos repetidos são simplesmente as potências do gerador. O grupo gerado neste caso é cíclico.  Com dois (ou mais) geradores, especialmente em um grupo não abeliano, a situação pode ser muito, muito mais complicada. Começamos com um gerador. Mas não esqueça de colocar-lo em uma lista de qualquer forma.</p>

		<sage>
			<input>
			A4 = AlternatingGroup(4)
			sigma = A4("(1,2,4)")
			sg = A4.subgroup([sigma])
			sg
			</input>
			<output>
			Subgroup of (Alternating group of order 4!/2 as a permutation group) 
			generated by [(1,2,4)]
			</output>
		</sage>

		<sage>
			<input>sg.order()</input>
			<output>3</output>
		</sage>

		<sage>
			<input>sg.list()</input>
			<output>[(), (1,2,4), (1,4,2)]</output>
		</sage>

		<sage>
			<input>sg.is_abelian()</input>
			<output>True</output>
		</sage>

		<sage>
			<input>sg.is_cyclic()</input>
			<output>True</output>
		</sage>

		<sage>
			<input>sg.is_subgroup(A4)</input>
			<output>True</output>
		</sage>

		<p>Podemos agora refazer o exemplo do princípio do capítulo. Traduzimos os elementos a notação cíclica, construímos o subgrupo formado a partir de dois geradores (o subgrupo não é cíclico), e como o subgrupo é abeliano, não é necessário que vejamos a tabela de Cayley de Sage como uma reflexão diagonal da tabela obtida no exemplo<nbsp /><xref ref="example-permute-s5" />.</p>

		<sage>
			<input>
			G = SymmetricGroup(5)
			sigma = G("(4,5)")
			tau = G("(1,3)")
			H = G.subgroup([sigma, tau])
			H.list()
			</input>
			<output>[(), (1,3), (4,5), (1,3)(4,5)]</output>
		</sage>

		<sage>
			<input>
			text_names = ['id', 'sigma', 'tau', 'mu']
			H.cayley_table(names=text_names)
			</input>
			<output>
			    *     id sigma   tau    mu
			     +------------------------
			   id|    id sigma   tau    mu
			sigma| sigma    id    mu   tau
			  tau|   tau    mu    id sigma
			   mu|    mu   tau sigma    id
			</output>
		</sage>

		<sage type="practice" />

	</subsection>

	<subsection xml:id="subsection-motion-group-cube">
		<title>Grupo de Movimentos de um Cubo</title>

		<p>Poderíamos imitar o exemplo no texto e criar elementos de <m>S_4</m> como permutações das diagonais. Uma construção mais óbvia, mas menos esclarecedora, é considerar as  8 quinas do cubo como os elementos a permutar. Então algumas simetrias óbvias do cubo provém de passar um eixo pelos centros de duas faces opostas, com quartos de voltas e meias-voltas em torno destes eixos. Com três eixos e quatro rotações por eixo, obtemos 12 simetrias, exceto que contamos a identidade três vezes.</p>

		<p>Numere as quatro quinas superiores de <m>1</m> a <m>4</m>, pondo o <m>1</m> na quina frontal-esquerda, e continuando em sentido horário visto de cima.  Use de <m>5</m> a <m>8</m> para as quinas inferiores, de maneira que  <m>5</m> fique diretamente abaixo de <m>1</m>, <m>6</m> abaixo de <m>2</m>, etc.  Usaremos quartos de volta, em sentido horário, em torno de cada eixo, vendo de cima, de frente e do lado direito respectivamente.</p>

		<sage>
			<input>
			G = SymmetricGroup(8)
			above = G("(1,2,3,4)(5,6,7,8)")
			front = G("(1,4,8,5)(2,3,7,6)")
			right = G("(1,2,6,5)(3,7,8,4)")
			cube = G.subgroup([above, front, right])
			cube.order()
			</input>
			<output>24</output>
		</sage>

		<sage>
			<input>cube.list()</input>
			<output>
            [(), (1,2,3,4)(5,6,7,8), (1,2,6,5)(3,7,8,4),
             (1,4,8,5)(2,3,7,6), (1,6,8)(2,7,4), (2,4,5)(3,8,6),
             (1,3,8)(2,7,5), (1,6)(2,5)(3,8)(4,7), (1,3,6)(4,7,5),
             (1,3)(2,4)(5,7)(6,8), (1,8)(2,7)(3,6)(4,5), (1,7)(2,3)(4,6)(5,8),
             (1,4)(2,8)(3,5)(6,7), (1,5,6,2)(3,4,8,7), (1,5,8,4)(2,6,7,3),
             (1,7)(2,6)(3,5)(4,8), (1,7)(2,8)(3,4)(5,6), (1,4,3,2)(5,8,7,6),
             (1,5)(2,8)(3,7)(4,6), (1,2)(3,5)(4,6)(7,8), (1,8,6)(2,4,7),
             (2,5,4)(3,6,8), (1,6,3)(4,5,7), (1,8,3)(2,5,7)]
            </output>
		</sage>

		<p>Como sabemos pela discussão no texto que o grupo de simetrias tem <m>24</m> elementos, vemos que estes três geradores são suficientes para criar todas as simetrias. Isto sugere várias perguntas que se encontram no Exercício<nbsp /><xref ref="exercise-cube-symmetry" />.</p>

		<sage type="practice" />

	</subsection>
</section>
