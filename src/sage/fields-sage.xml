<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->

<section xml:id="fields-sage">
	<title>Sage</title>

	<introduction>
		<p>Em Sage, e outros lugares, uma extensão dos racionais se chama <q>corpo de números.</q>  Os corpos de números estão entre as características mais consolidadas da Sage.</p>
	</introduction>

	<subsection>
		<title>Corpos de números</title>

		<p>Existem várias formas de criar um corpo de números.  Estamos familiarizados com a sintaxe donde anexamos um número irracional que possamos descrever com combinações de raízes e operações aritméticas.</p>

		<sage>
		<input>
		M.&lt;a&gt; = QQ[sqrt(2)+sqrt(3)]; M
		</input>
		<output>
		Number Field in a with defining polynomial x^4 - 10*x^2 + 1
		</output>
		</sage>

		<p>Podemos também especificar o elemento que desejamos anexar como uma raíz de um polinômio irredutível.  Uma possibilidade é construir primeiro o anel de polinômios de maneira que o polinômio tenha a localização de seus coeficientes determinada de forma explícita.</p>

		<sage>
		<input>
		F.&lt;y&gt; = QQ[]
		p = y^3 - 1/4*y^2 - 1/16*y + 1/4
		p.is_irreducible()
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		N.&lt;b&gt; = NumberField(p, 'b'); N
		</input>
		<output>
		Number Field in b with
		defining polynomial y^3 - 1/4*y^2 - 1/16*y + 1/4
		</output>
		</sage>

		<p>Invés de construir todo o anel de polinômios, podemos simplesmente introduzir uma variável como gerador de um anel de polinômios e logo criar os polinômios a partir desta variável.  Isto nos libera de colocar um nome no anel de polinômios.  Note que neste exemplo ambas instâncias de <c>z</c> são necessárias.</p>

		<sage>
		<input>
		z = polygen(QQ, 'z')
		q = z^3 - 1/4*z^2 - 1/16*z + 1/4
		q.parent()
		</input>
		<output>
		Univariate Polynomial Ring in z over Rational Field
		</output>
		</sage>

		<sage>
		<input>
		P.&lt;c&gt; = NumberField(q, 'c'); P
		</input>
		<output>
		Number Field in c with
		defining polynomial z^3 - 1/4*z^2 - 1/16*z + 1/4
		</output>
		</sage>

		<p>Podemos recuperar o polinômio usado para definir um corpo de números, ainda que  tenhamos o construído com a especificação de um elemento irracional.  Neste caso, o polinômio corresponde ao polinômio minimal do elemento.</p>

		<sage>
		<input>
		M.polynomial()
		</input>
		<output>
		x^4 - 10*x^2 + 1
		</output>
		</sage>

		<sage>
		<input>
		N.polynomial()
		</input>
		<output>
		y^3 - 1/4*y^2 - 1/16*y + 1/4
		</output>
		</sage>

		<p>Para qualquer elemento de um corpo de números, Sage é capaz de calcular seu polinômio minimal.</p>

		<sage>
		<input>
		elemento = -b^2 + 1/3*b + 4
		elemento.parent()
		</input>
		<output>
		Number Field in b with
		defining polynomial y^3 - 1/4*y^2 - 1/16*y + 1/4
		</output>
		</sage>

		<sage>
		<input>
		r = elemento.minpoly('t'); r
		</input>
		<output>
		t^3 - 571/48*t^2 + 108389/2304*t - 13345/216
		</output>
		</sage>

		<sage>
		<input>
		r.parent()
		</input>
		<output>
		Univariate Polynomial Ring in t over Rational Field
		</output>
		</sage>

		<sage>
		<input>
		r.subs(t=elemento)
		</input>
		<output>
		0
		</output>
		</sage>

		<p>Substituindo o <c>elemento</c> em seu teórico polinômio minimal e obtendo 0 não é evidência suficiente para demonstrar que é realmente o polinômio <em>minimal</em>, mas ao menos é tranquilizador.</p>
	</subsection>

	<subsection>
		<title>Corpos de Números Absolutos e Relativos</title>

		<p>Em Sage podemos anexar vários elementos de forma simultânea e podemos criar torres aninhadas de corpos de números.  Sage usa o termo <q>absoluto</q> para se referir a um corpo de números como uma extensão dos racionais, e o término <q>relativo</q> para se referir a um corpo de números construédo, ou visto, como uma extensão de outro corpo de números (não trivial).</p>

		<sage>
		<input>
		A.&lt;a,b&gt; = QQ[sqrt(2), sqrt(3)]
		A
		</input>
		<output>
		Number Field in sqrt2 with defining polynomial x^2 - 2 over
		its base field
		</output>
		</sage>

		<sage>
		<input>
		B = A.base_field(); B
		</input>
		<output>
		Number Field in sqrt3 with defining polynomial x^2 - 3
		</output>
		</sage>

		<sage>
		<input>
		A.is_relative()
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		B.is_relative()
		</input>
		<output>
		False
		</output>
		</sage>

		<p>O corpo de números <c>A</c> foi construído como o que escreveríamos <m>{\mathbb Q}\subset{\mathbb Q}[\sqrt{3}]\subset{\mathbb Q}[\sqrt{3},\sqrt{2}]</m>.  Notemos a ligeira diferença na ordem dos elementos anexados e notemos como os corpos de números utilizam nomes internos mais sofisticados (<c>sqrt2</c>, <c>sqrt3</c>) para os novos elementos.</p>

		<p>Podemos <q>planificar</q> um corpo relativo para o ver como um corpo absoluto, o que podría ter sido nossa intenção desde o começo.  Aqui criaremos um novo corpo de números a partir de <c>A</c> que faz um corpo de números absolutos.</p>

		<sage>
		<input>
		C.&lt;c&gt; = A.absolute_field()
		C
		</input>
		<output>
		Number Field in c with defining polynomial x^4 - 10*x^2 + 1
		</output>
		</sage>

		<p>Uma vez que construímos um corpo de números absolutos desta maneira podemos fazer isomorfismos do e para o corpo absoluto.  Recordemos que nossa torre foi construída por geradores <c>a</c> e <c>b</c>, enquanto a torre planificada é gerada por <c>c</c>.  O método <c>.structure()</c> entrega duas funções, com o corpo absoluto como domínio e contradomínio (nesta ordem).</p>

		<sage>
		<input>
		fromC, toC = C.structure()
		fromC(c)
		</input>
		<output>
		sqrt2 - sqrt3
		</output>
		</sage>

		<sage>
		<input>
		toC(a)
		</input>
		<output>
		1/2*c^3 - 9/2*c
		</output>
		</sage>

		<sage>
		<input>
		toC(b)
		</input>
		<output>
		1/2*c^3 - 11/2*c
		</output>
		</sage>

		<p>Isso nos diz que o gerador, <c>c</c>, é igual a <m>\sqrt{2}-\sqrt{3}</m>, e que, tanto <m>\sqrt{2}</m> como <m>\sqrt{3}</m> podem ser expressadas como funções polinomiais de <c>c</c>.  Com estas conexões, te sugerimos desenvolver a mano as duas expressões finais em <c>c</c>, e dessa maneira apreciar melhor o trabalho que a Sage faz ao determiná-las para nós.  Este cálculo é um exemplo da conclusão do Teorema<nbsp /><xref ref="theorem-primitive-element" /> que vem na continuação.</p>

		<p>Muitos ds métodos para corpos de números tem tanto uma versão absoluta como uma relativa e nós acharemos mais conveniente trbalhar numa torre ou numa versão planificada dela, de forma que os isomorfismos entre as duas possam ser avaliadas por traduzir ambas perguntas e respostas.</p>

		<p>Como o espaço vetorial sobre <m>{\mathbb Q}</m>, ou sobre outro corpo de números, os corpos de números são extensões finitas e tem uma dimensão, chamada grau.  Esses graus são fáceis de se obter em Sage, ainda que no caso de corpos relativos deveremos ser mais precisos sobre qual é o grau buscado.</p>

		<sage>
		<input>
		B.degree()
		</input>
		<output>
		2
		</output>
		</sage>

		<sage>
		<input>
		A.absolute_degree()
		</input>
		<output>
		4
		</output>
		</sage>

		<sage>
		<input>
		A.relative_degree()
		</input>
		<output>
		2
		</output>
			</sage>
		</subsection>

		<subsection>
		<title>Corpos de decomposição</title>

		<p>Aqui temos um exemplo concreto de como usar Sage para construir o corpo de decomposição de um polinômio.  Consideremos <m>p(x)=x^4+x^2-1</m>.  Primeiro construiremos um corpo de números com uma raiz, para depois fatorar o polinômio sobre este novo corpo.</p>

		<sage>
		<input>
		x = polygen(QQ, 'x')
		p = x^4 + x^2 - 1
		p.parent()
		</input>
		<output>
		Univariate Polynomial Ring in x over Rational Field
		</output>
		</sage>

		<sage>
		<input>
		p.is_irreducible()
		</input>
		<output>
		True
		</output>
		</sage>

		<sage>
		<input>
		M.&lt;a&gt; = NumberField(p, 'a')
		y = polygen(M, 'y')
		p = p.subs(x = y)
		p
		</input>
		<output>
		y^4 + y^2 - 1
		</output>
		</sage>

		<sage>
		<input>
		p.parent()
		</input>
		<output>
		Univariate Polynomial Ring in y over Number Field in a with
		defining polynomial x^4 + x^2 - 1
		</output>
		</sage>

		<sage>
		<input>
		p.factor()
		</input>
		<output>
		(y - a) * (y + a) * (y^2 + a^2 + 1)
		</output>
		</sage>

		<sage>
		<input>
		a^2 + 1 in QQ
		</input>
		<output>
		False
		</output>
		</sage>

		<p>Assim nosso polinômio se fatora parcialmente em dois fatores lineares e um quadrático.  Mas notemos que o fator quadrático tem um coeficiente irracional, <m>a^2+1</m>, de maneira que o fator quadrático pertence estritamente ao anel de polinômios sobre <c>M</c> e não sobre <c>QQ</c>.</p>

		<p>Construiremos uma extensão que contenha uma raiz do fator quadrático, chamado <c>q</c> neste caso.  Então, no lugar de usar a função <c>polygen()</c>, construiremos um anel de polinômios  <c>R</c> sobre <c>N</c> com a variável <c>z</c>.  A razão de fazer esto é que podemos ilustrar como <q>evoluir</q> o polinômio <c>p</c> com a sintaxe <c>R(p)</c> para passar de ter coeficientes em <c>M</c> e começar a tê-los em <c>N</c>.</p>

		<sage>
		<input>
		q = y^2 + a^2 + 1
		N.&lt;b> = NumberField(q, 'b')
		R.&lt;z> = N[]
		s = R(p)
		s
		</input>
		<output>
		z^4 + z^2 - 1
		</output>
		</sage>

		<sage>
		<input>
		s.parent()
		</input>
		<output>
		Univariate Polynomial Ring in z over Number Field in b with
		defining polynomial y^2 + a^2 + 1 over its base field
		</output>
		</sage>

		<sage>
		<input>
		s.factor()
		</input>
		<output>
		(z + b) * (z + a) * (z - a) * (z - b)
		</output>
		</sage>

		<sage>
		<input>
		a in N, b in N
		</input>
		<output>
		(True, True)
		</output>
		</sage>

		<p>Assim teremos um corpo, <c>N</c>, em que nosso polinômio se fatora com todos seus fatores lineares.  Podemos obter outra fatoração convertendo <c>N</c> em um corpo absoluto e fatorando aí.  Necessitaremos recriar o polinômio sobre <c>N</c>, pois uma substituição levaria elementos do anel equivocado.</p>

		<sage>
		<input>
		P.&lt;c&gt; = N.absolute_field()
		w = polygen(P, 'w')
		p = w^4 + w^2- 1
		p.factor()
		</input>
		<output>
		(w - 7/18966*c^7 + 110/9483*c^5 +  923/9483*c^3 +  3001/6322*c) *
		(w - 7/37932*c^7 +  55/9483*c^5 + 923/18966*c^3 - 3321/12644*c) *
		(w + 7/37932*c^7 -  55/9483*c^5 - 923/18966*c^3 + 3321/12644*c) *
		(w + 7/18966*c^7 - 110/9483*c^5 -  923/9483*c^3 -  3001/6322*c)
		</output>
		</sage>

		<p>Esta é uma alternativa interessante, naquilo que as raízes do polinômio são expressões polinomiais em termo de um sé gerador <c>c</c>.  Como as raízes envolvem potências sétimas de <c>c</c>, podemos suspeitar (mas não estar certo) que o polinômio minimal de <c>c</c> tem grau <m>8</m> e que <c>P</c> é uma extensão de grau <m>8</m> dos racionais. De fato <c>P</c> (ou <c>N</c>) é um corpo de decomposição para <m>p(x)=x^4+x^2-1</m>.  Suas raízes não são realmente tão horríveis como parecem <mdash /> vamos devolvê-las ao corpo relativo.</p>

		<p>Primero queremos reescrever um fator (o primeiro) na forma <m>(w-r)</m> para identificar a raiz com os signos corretos.</p>

		<sage type="display">
		<input>
		(w -  7/18966*c^7 + 110/9483*c^5 + 923/9483*c^3 + 3001/6322*c) =
		(w - (7/18966*c^7 - 110/9483*c^5 - 923/9483*c^3 - 3001/6322*c))
		</input>
		</sage>

		<p>Com os isomorfismos convertidos podemos reconhecer as raízes pelo que elas são.</p>

		<sage>
		<input>
		fromP, toP = P.structure()
		fromP(7/18966*c^7 - 110/9483*c^5 - 923/9483*c^3 - 3001/6322*c)
		</input>
		<output>
		-b
		</output>
		</sage>

		<p>Assim a expressão complicada em termos de <c>c</c> é simplesmente o oposto da raiz anexada no segundo passo da construção da torre de corpos de números.  Seria um bom exercício ver o que acontece com as outras três raízes ( tendo cuidade de escrever corretamente os sinais em cada uma delas). </p>

		<p>Esta é uma boa oportunidade para ilustrar o Teorema<nbsp /><xref ref="theorem-tower-indices" />.</p>

		<sage>
		<input>
		M.degree()
		</input>
		<output>
		4
		</output>
		</sage>

		<sage>
		<input>
		N.relative_degree()
		</input>
		<output>
		2
		</output>
		</sage>

		<sage>
		<input>
		P.degree()
		</input>
		<output>
		8
		</output>
		</sage>

		<sage>
		<input>
		M.degree()*N.relative_degree() == P.degree()
		</input>
		<output>
		True
		</output>
		</sage>
	</subsection>

	<subsection>
		<title>Números Algébricos</title>

		<p>O Corolário<nbsp /><xref ref="corollary-algebraic-numbers-field" /> diz que o conjunto de <em>todos</em> os números algébricos forma um corpo.  Este corpo está implementado na Sage como <c>QQbar</c>.  Isto permite encontrar raízes de polinômios como números exatos que se mostram como aproximações.</p>

		<sage>
		<input>
		x = polygen(QQ, 'x')
		p = x^4 + x^2 - 1
		r = p.roots(ring=QQbar); r
		</input>
		<output>
		[(-0.7861513777574233?,  1), (0.7861513777574233?,  1),
		 (-1.272019649514069?*I, 1), (1.272019649514069?*I, 1)]
		</output>
		</sage>

		<p>Assim tendo pedido pelas raízes de um polimônio com coeficientes racionais, especificando que queremos qualquer raiz que possa estar fora dos racionais e dentro do corpo dos algébricos. Como o corpo dos números algébricos contém todas as raízes, obtemos as quatro raízes do polinômio de grau quatro.  Estas raízes estão calculadas de maneira a estar em um intervalo e o sinal de interrogação indica que os dígitos anteriores são corretos.  (Os inteiros que seguem a cada uma das raízes, indicam a multiplicidade com que essas raízes ocorrem.  Use a opção <c>multiplicities=False</c> para que essa informação não apareça.)  Vamos dar uma olhada em como a Sage trabalha com o corpo dos números algébricos.</p>

		<sage>
		<input>
		r1 = r[0][0]; r1
		</input>
		<output>
		-0.7861513777574233?
		</output>
		</sage>

		<sage>
		<input>
		r1.as_number_field_element()
		</input>
		<output>
		(Number Field in a with defining polynomial y^4 + y^2 - 1, a, Ring morphism:
		    From: Number Field in a with defining polynomial y^4 + y^2 - 1
		    To:   Algebraic Real Field
		    Defn: a |--> -0.7861513777574233?)
		</output>
		</sage>

		<p>Três coisas estão associadas com esta primeira raiz.  Em primeiro lugar um corpo de números, com gerador <c>a</c> e um polinômio similar mas não idêntico ao polinômio do qual estamos buscando as raízes.  Em segundo lugar exite uma expressão no gerador <c>a</c>, que representa a raiz específica.  Neste caso, a expressão é simples, mas poderia ser mais complicada em outros exemplos.  Finalmente, existe um homomorfismo do corpo dos números ao <q>Algebraic Real Field</q>, <c>AA</c>, que é o subcorpo de <c>QQbar</c> que contém solmente números reais, que associa o gerador <c>a</c> com o número <c>-0.7861513777574233?</c>.  Verifiquemos, de duas formas diferentes, que a raiz dada realmente é uma raiz.</p>

		<sage>
		<input>
		r1^4 + r1^2 - 1
		</input>
		<output>
		0
		</output>
		</sage>

		<sage>
		<input>
		N, rexact, homomorphism = r1.as_number_field_element()
		(rexact)^4 + rexact^2 - 1
		</input>
		<output>
		0
		</output>
		</sage>

		<p>Agora que temos teoria suficiente para entender o corpo dos números algébricos e uma forma natural de representá-los de forma exata, podemos considerar as operações no corpo.   Se tomamos os números algébricos e os somamos, obtemos outro número algébrico (Corolário<nbsp /><xref ref="corollary-algebraic-numbers-field" />).  Então, qual é o polinômio minimal resultante? Como se obtém em Sage?  Você pode ler o código fonte se estiver interessados na resposta.</p>
	</subsection>

	<subsection>
		<title>Construções geométricas</title>

		<p>Sage pode fazer muitos coisas, mas ainda não é capaz de traçar retas com régua e compasso. No entanto, podemos rapidamente determinar que tressecar um ângulo de <m>60</m> grau é impossível.  Anexamos o cosseno de um ângulo de <m>20</m> graus (em radianos) aos racionais, determinamos o grau da extensão, e verificamos que não é uma potência inteira de <m>2</m>.  Tudo em uma linha. Ótimo!</p>

		<sage>
		<input>
		log(QQ[cos(pi/9)].degree(), 2) in ZZ
		</input>
		<output>
		False
		</output>
		</sage>
	</subsection>

</section>
