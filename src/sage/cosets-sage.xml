<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 1997-2014  Thomas W. Judson     -->
<!-- See the file COPYING for copying conditions.  -->

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->

<section xml:id="cosets-sage">
	<title>Sage</title>

	<introduction>
		<p>Sage pode criar todas as classes laterais de um subgrupo e todos os subgrupos de um grupo. Por mais que estes métodos possam ser um pouco lentos, eles são em muitos casos, eles podem te fornecer caminhos muito melhores do que o papel e o lápis e podem te ajudar a entender a estrutura de grupos finitos.</p>
	</introduction>

	<subsection>
		<title>Classes Laterais</title>

		<p>Sage criará todas as classes laterais direitas (ou esquerdas) de um subgrupo.  Escritas matematicamente, as classes laterais são conjuntos, e a ordem dos elementos de dentro é irrelevante.  Em Sage, as listas são mais naturais e aqui isso é uma vantagem.</p>

		<p>Sage cria as classes laterais de um subgrupo como lista de listas.  Cada lista interna é uma classe lateral particular.  A primeira classe lateral sempre é o próprio subgrupo e o primeiro elemento desta classe é a identidade.  Cada uma das outras classes podem ser construídas para terem seu primeiro elemento como seu representante e se você usar esse elemento como representante, os elementos da classe lateral terão a mesma ordem se tivessem sido criados pela multiplicação desse representante pelos elemento na primeira classe lateral (o subgrupo).</p>

		<p>O parâmetro opcional <c>side</c> pode ser  <c>'right'</c> ou <c>'left'</c>, se não está explicitado, a opção padrão é escolher as classes laterais direitas.  As opções se referem a que lado do produto está o representante.  Note que agora os resultados de Sage estaram <q>ao contrário</q> comparados com o texto.  Aqui temos um Exemplo<nbsp /><xref ref="example-cosets-s3-cosets" /> reprisado, mas em uma ordem ligeiramente diferente.</p>

		<sage>
			<input>
			G = SymmetricGroup(3)
			a = G("(1,2)")
			H = G.subgroup([a])
			rc = G.cosets(H, side='right'); rc
			</input>
			<output>[[(), (1,2)], [(2,3), (1,3,2)], [(1,2,3), (1,3)]]</output>
		</sage>

		<sage>
			<input>lc = G.cosets(H, side='left'); lc</input>
			<output>[[(), (1,2)], [(2,3), (1,2,3)], [(1,3,2), (1,3)]]</output>
		</sage>

		<p>Se olhamos cuidadosamente, podemos ver a diferença entre as classes laterais direitas e esquerdas.  Compare estas classes laterais com as do texto e note que direita e esquerda estão trocadas.  Não deve ser um problema <mdash /> só fique com isso em mente.</p>

		<sage>
			<input>
			G = SymmetricGroup(3)
			b = G("(1,2,3)")
			H = G.subgroup([b])
			rc = G.cosets(H, side='right'); rc
			</input>
			<output>[[(), (1,2,3), (1,3,2)], [(2,3), (1,3), (1,2)]]</output>
		</sage>

		<sage>
			<input>lc = G.cosets(H, side='left'); lc</input>
			<output>[[(), (1,2,3), (1,3,2)], [(2,3), (1,2), (1,3)]]</output>
		</sage>

		<p>Se analizamos a lista composta, podemos ver que as classes laterais direitas e esquerdas são as mesmas. Vejamos o que Sage pensa:</p>

		<sage>
			<input>rc == lc</input>
			<output>False</output>
		</sage>

		<p>Matematicamente, precisamos de conjuntos, mas a Sage está trabalhando com listas ordenadas e a ordem importa.  No entanto, se sabemos que nossa listas não contém duplicados (o método <c>.cosets()</c> nunca produzirá duplicados) então podemos ordenar as listas e um teste de igualdade ocorrerá como planejado.  Os elementos de um grupo de permutação têm uma ordem definida para eles <mdash /> não é tão importante <em>qual</em> é essa ordem, só que <em>alguma</em> ordem está definida.  A função <c>sorted()</c> pegará qualquier lista devolvendo uma versão ordenada.  Assim, para cada lista de classes laterais, ordenaremos as classes individualmente e, então, ordenaremos a lista de classes ordenadas.  Esta é uma manobra típica, ainda que um pouco complicada para as listas aninhadas.</p>

		<sage>
			<input>
			rc_sorted = sorted([sorted(coset) for coset in rc])
			rc_sorted
			</input>
			<output>[[(), (1,2,3), (1,3,2)], [(2,3), (1,2), (1,3)]]</output>
		</sage>

		<sage>
			<input>
			lc_sorted = sorted([sorted(coset) for coset in lc])
			lc_sorted
			</input>
			<output>[[(), (1,2,3), (1,3,2)], [(2,3), (1,2), (1,3)]]</output>
		</sage>

		<sage>
			<input>rc_sorted == lc_sorted</input>
			<output>True</output>
		</sage>

		<p>A lista de todas as classes laterais pode ser bastante longa (conterá todos os elementos do grupo) e pode tomar vários segundos para ser completada, inclusive para grupos pequenos.  Existem formas mais sofisticadas, e mais rápidas, de estudar classes laterais (como simplesmente usar seus representantes), mas para entender estas técnicas é necessário ter mais teoria.</p>

		<sage type="practice"/>
	</subsection>

	<subsection>
		<title>Subgrupos</title>

		<p>Sage pode calcular todos os subgrupos de um grupo.  Isto pode produzir uma resposta ainda mais longa que o método de classes laterais e pode ser muito mais lento, dependendo da estrutura do grupo.  A lista está ordenada pelo tamnho dos subgrupos, com os menores primeiros. Como uma demonstação iremos computar primeiro uma lista de todos os subgrupos de um grupo pequeno e, depois, extrair somente um desses subgrupos da lista para mais estudos futuros.</p>

		<sage>
			<input>
			G = SymmetricGroup(3)
			sg = G.subgroups(); sg
			</input>
			<output>
			[Subgroup of (Symmetric group of order 3! as a permutation group) generated by [()],
			 Subgroup of (Symmetric group of order 3! as a permutation group) generated by [(2,3)],
			 Subgroup of (Symmetric group of order 3! as a permutation group) generated by [(1,2)],
			 Subgroup of (Symmetric group of order 3! as a permutation group) generated by [(1,3)],
			 Subgroup of (Symmetric group of order 3! as a permutation group) generated by [(1,2,3)],
			 Subgroup of (Symmetric group of order 3! as a permutation group) generated by [(2,3), (1,2,3)]]
			</output>
		</sage>

		<sage>
			<input>H = sg[4]; H</input>
			<output>Subgroup of (Symmetric group of order 3! as a permutation group) generated by [(1,2,3)]</output>
		</sage>

		<sage>
			<input>H.order()</input>
			<output>3</output>
		</sage>

		<sage>
			<input>H.list()</input>
			<output>[(), (1,2,3), (1,3,2)]</output>
		</sage>

		<sage>
			<input>H.is_cyclic()</input>
			<output>True</output>
		</sage>

		<!-- RAB 2014/08/18 ref is to a proposition, not a Corollary? -->
		<p>A saída do método <c>.subgroups()</c> pode ser grande, podemos estar interessados nas propriedades de certos subgrupos específicos (como no exemplo anterior) ou perguntas mais amplas como a <q>estrutura dos subgrupos</q> do grupo.  Aqui estendemos o Corolário<nbsp /><xref ref="proposition-cosets-theorem-10" />.  Note que o fato de que Sage <em>calcula</em> um subgrupo de ordem  6 em <m>A_4</m>, não é um substituto válido de uma  <em>demonstração</em> como é dada pelo corolário.  Mas o resultado computacional nos anima para buscar a demostração teórica con mayor confianza.</p>

		<sage>
			<input>
			G = AlternatingGroup(4)
			sg = G.subgroups()
			[H.order() for H in sg]
			</input>
			<output>[1, 2, 2, 2, 3, 3, 3, 3, 4, 12]</output>
		</sage>

		<p>Assim que não vemos um subgrupo de ordem 6 na lista de subgrupos de <m>A_4</m>.  Note como o Teorema de Lagrange (Teorema<nbsp /><xref ref="theorem-lagrange" />) está em evidência <mdash /> todos os subgrupos têm ordens que dividem <m>12</m>, a ordem de <m>A_4</m>.</p>

		<sage>
			<input>
			G = SymmetricGroup(4)
			sg = G.subgroups()
			[H.order() for H in sg]
			</input>
			<output>
			[1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4,
			 6, 6, 6, 6, 8, 8, 8, 12, 24]
			</output>
		</sage>

		<p>Novamente, note o Teorema de Lagrange em ação.  Mas, ainda mais interessante, <m>S_4</m> tem um subgrupo de ordem 6.  Quatro deles, para ser preciso.  Esses quatro subgrupos de ordem 6 são similares entre eles, pode descrevê-los de forma simples (<em>antes</em> de entrar na lista <c>sg</c> para obter mais informações)?  Se quiser saber quantos subgrupos tem <m>S_4</m>, pode simplesmente contar o número de subgrupos na lista <c>sg</c>.  A função <c>len()</c> faz isto para <em>qualquer</em> lista e é usualmente uma forma fácil de contar coisas.</p>

		<sage>
		<input>len(sg)</input>
		<output>30</output>
		</sage>

		<sage type="practice"/>

	</subsection>

	<subsection>
		<title>Subgrupos de Grupos Cíclicos</title>

		<p>Agora que estamos mais familiarizados com os grupos de permutações e conhecemos o método <c>.subgroups()</c>, podemos revisitar uma idea do Capítulo<nbsp /><xref ref="cyclic" />. Os subgrupos de um grupo cíclico sempre são cíclicos, mas quantos existem e que ordens têm?</p>

		<sage>
			<input>
			G = CyclicPermutationGroup(20)
			[H.order() for H in G.subgroups()]
			</input>
			<output>[1, 2, 4, 5, 10, 20]</output>
		</sage>

		<sage>
			<input>
			G = CyclicPermutationGroup(19)
			[H.order() for H in G.subgroups()]
			</input>
			<output>[1, 19]</output>
		</sage>

		<p>Poderiamos fazer isso o dia todo, mas agora que temos Sage a nossa disposição, varie a ordem de <c>G</c> trocando o valor de <c>n</c> e estude vários desses resultados.  Pode tentar um grupo cíclico de ordem 24 e comparar com o grupo simétrico <m>S_4</m> (acima) que também tem ordem 24. Você percebe alguma conjectura?</p>

		<sage>
			<input>
			n = 8
			G = CyclicPermutationGroup(n)
			[H.order() for H in G.subgroups()]
			</input>
			<output>[1, 2, 4, 8]</output>
		</sage>

		<sage type="practice"/>

	</subsection>

	<subsection>
		<title>Função Phi de Euler</title>

		<p>Para acrescentar a nossas funções de teoria dos números do Capítulo<nbsp /><xref ref="integers" />, notemos que Sage põe a nossa disposição a função <m>\phi</m> de Euler como <c>euler_phi()</c>.</p>

		<sage>
			<input>euler_phi(345)</input>
			<output>176</output>
		</sage>

		<p>Aqui segue um experimento interessante que você pode tentar rodar quantas vezes quiser.</p>

		<sage doctest="random">
			<input>
			m = random_prime(10000)
			n = random_prime(10000)
			m, n, euler_phi(m*n) == euler_phi(m)*euler_phi(n)
			</input>
			<output>(5881, 1277, True)</output>
		</sage>

		<p>Alguma outra conjectura? Podemos generalizar este resultado?</p>

		<sage type="practice"/>

	</subsection>

</section>
