<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->

<section xml:id="algcodes-sage">
	<title>Sage</title>
	
	<introduction>
		<p>Sage contém uma coleção importante de códigos lineares e uma variedade de métodos que podem ser usados para investigá-los.</p>
	</introduction>

	<subsection>
		<title>Construindo Códigos Lineares</title>

		<p>O objeto <c>codes</c> pode ser usado para obter uma lista concisa dos códigos implementados disponíveis.  Escreva <c>codes.</c> e pressione <c>Tab</c>.  A maior parte das interfaces da Sage te entregarão uma lista.  Você pode usar o sinal de interrogação ao final do nome de um método para aprender mais sobre seus parâmetros.</p>

		<sage doctest="not tested">
			<input>codes.</input>
		</sage>

		<p>Usaremos o código binário de Hamming <m>(7,4)</m> clássico como ilustração.  <q>Binário</q> quer dizer que temos vetores com só zeros e uns, <m>7</m> é o comprimento e significa que os vetores tem <m>7</m> coordenadas, e <m>4</m> é a dimensão, o que significa que este código contém <m>2^4=16</m> vetores. A documentação supõe que sabemos umas poucos coisas de mais adiante no texto.  Usamos <c>GF(2)</c> para especificar que o código é binário <mdash /> isso terá mais sentido depois de ter sido estudado corpos finitos. Um segundo parâmetro é <c>r</c> e podemos ver as fórmulas na documentação que configuramos <c>r=3</c> nos dará comprimento <m>7</m>.</p>

		<sage>
			<input>H = codes.HammingCode(GF(2), 3); H</input>
			<output>[7, 4] Hamming Code over GF(2)</output>
		</sage>
	</subsection>

	<subsection>
		<title>Propriedades dos Códigos Lineares</title>

		<p>Podemos agora examinar o código que acabamos de construir.  Primeiro sua dimensão.</p>

		<sage>
			<input>H.dimension()</input>
			<output>4</output>
		</sage>

		<p>O código é suficientemente pequeno para que possamos listar todas suas palavras.</p>

		<sage>
			<input>H.list()</input>
			<output>
			[(0, 0, 0, 0, 0, 0, 0), (1, 0, 0, 0, 0, 1, 1), (0, 1, 0, 0, 1, 0, 1),
			 (1, 1, 0, 0, 1, 1, 0), (0, 0, 1, 0, 1, 1, 0), (1, 0, 1, 0, 1, 0, 1),
			 (0, 1, 1, 0, 0, 1, 1), (1, 1, 1, 0, 0, 0, 0), (0, 0, 0, 1, 1, 1, 1),
			 (1, 0, 0, 1, 1, 0, 0), (0, 1, 0, 1, 0, 1, 0), (1, 1, 0, 1, 0, 0, 1),
			 (0, 0, 1, 1, 0, 0, 1), (1, 0, 1, 1, 0, 1, 0), (0, 1, 1, 1, 1, 0, 0),
			 (1, 1, 1, 1, 1, 1, 1)]
			</output>
		</sage>

		<p>A distância mínima é possivelmente uma de suas propriedades mais importantes. Os códigos de Hamming sempre tem distância mínima <m>d=3</m>, de maneira que sempre são corretores de um erro.</p>

		<sage>
			<input>H.minimum_distance()</input>
			<output>3</output>
		</sage>

		<p>Sabemos que a matriz verificadora e a matriz geradora são úteis para a construção, descrição e análise dos códigos lineares. Os nomes dos métodos em Sage são um pouco enigmáticos. Sage tem rotinas para analisar matrizes com elementos de diferentes corpos, de maneiras que faremos boa parte da análise desta matriz dentro da Sage.</p>

		<sage>
			<input>C = H.parity_check_matrix(); C</input>
			<output>
			[1 0 1 0 1 0 1]
			[0 1 1 0 0 1 1]
			[0 0 0 1 1 1 1]
			</output>
		</sage>

		<p>A matriz geradora do texto tem <em>colunas</em> que são palavras do código, e combinações lineares das colunas (o espaço de colunas da matriz) são palavras do código. Em Sage a matriz geradora tem <em>linhas</em> que são palavras do código e o espaço linha da matriz é o código. Temos aqui outro ponto em que devemos traduzir mentalmente entre uma seleção feita no texto e uma seleção feita pelos desenvolvedores da Sage.</p>

		<sage>
			<input>G = H.generator_matrix(); G</input>
			<output>
			[1 0 0 0 0 1 1]
			[0 1 0 0 1 0 1]
			[0 0 1 0 1 1 0]
			[0 0 0 1 1 1 1]
			</output>
		</sage>

		<p>Aqui temos um teste parcial que essas duas matrizes são corretas, exercitando o Lema<nbsp /><xref ref="lemma-parity-check" />.  Note que necessitamos transpor a matriz geradora pelas razões expostas antes.</p>

		<sage>
			<input>C*G.transpose() == zero_matrix(3, 4)</input>
			<output>True</output>
		</sage>

		<p>Notemos que a matriz verificadora pode não ser canônica e que a matriz geradora pode não ser padrão. Sage pode produzir uma matriz geradora que tenha um conjunto de colunas que formem a matriz identidade, mas não é garantido que estas colunas sejam as primeiras. (Colunas, não linhas.) Tal matriz se diz <term>sistemática</term>, e o método em Sage é <c>.systematic_generator_matrix()</c>.</p>

		<sage>
			<input>H.systematic_generator_matrix()</input>
			<output>
			[1 0 0 0 0 1 1]
			[0 1 0 0 1 0 1]
			[0 0 1 0 1 1 0]
			[0 0 0 1 1 1 1]
			</output>
		</sage>

	</subsection>

	<subsection>
		<title>Decodificando um Código Linear</title>

		<p>Podemos decodificar mensagens recebidas originadas por um código linear. Suponha que recebemos o vetor binário de comprimento <m>7</m><c>r</c>.</p>

		<sage>
			<input>r = vector(GF(2), [1, 1, 1, 1, 0, 0, 1]); r</input>
			<output>(1, 1, 1, 1, 0, 0, 1)</output>
		</sage>

		<p>Podemos reconhecer que um ou mais erros ocorreram, pois <c>r</c> não pertence ao código, dado que o seguinte cálculo não resulta no vetor zero.</p>

		<sage>
			<input>C*r</input>
			<output>(1, 1, 0)</output>
		</sage>

		<p>Um código linear tem um método <c>.decode</c>. Você pode escolher entre algoritmos distintos, mas os códigos de Hamming tem seu algoritmo particular. O algoritmo padrão faz o uso de síndromes.</p>

		<sage>
			<input>H.decode_to_code(r)</input>
			<output>(1, 1, 0, 1, 0, 0, 1)</output>
		</sage>

		<p>Se estamos dispostos a supor que só ocorreu um erro (o que podemos, se a probabilidade de erro em uma entrada particular do vetor seja muito baixa), então vemos que ocorreu um erro na terceira posição.</p>

		<p>Recorde que poderia ser que tivesse ocorrido mais de um erro. Por exemplo, suponha que a mensagem é a mesma de antes e ocorrem erros na terceira, quinta e sexta posições.</p>

		<sage>
			<input>
			message = vector(GF(2), [1, 1, 0, 1, 0, 0, 1])
			errors = vector(GF(2), [0, 0, 1, 0, 1, 1, 0])
			received = message + errors
			received
			</input>
			<output>(1, 1, 1, 1, 1, 1, 1)</output>
		</sage>

		<p>Então parece que recebemos uma palavras do código, então assumimos nenhum erro e decodificamos incorretamente.</p>

		<sage>
			<input>H.decode_to_code(received) == message</input>
			<output>False</output>
		</sage>

		<sage>
			<input>H.decode_to_code(received) == received</input>
			<output>True</output>
		</sage>
	</subsection>

</section>